1. Descrever os códigos para criação das tabelas no banco de dados. 

CREATE TABLE MEDICO( COD_MEDICO INT NOT NULL PRIMARY KEY, NOME VARCHAR(40), ENDERECO VARCHAR(40), FONE_CONTATO VARCHAR(40), )
CREATE TABLE CONSULTA( COD_PACIENTE INT NOT NULL PRIMARY KEY, COD_MEDICO INT, DATACONSULTA DATE, ) CREATE TABLE CARTAO( COD_CARTAO INT NOT NULL PRIMARY KEY, COD_PACIENTE INT, CONVENIO VARCHAR(40), DATA_VENC DATE ) CREATE TABLE PACIENTE( COD_PACIENTE INT NOT NULL PRIMARY KEY, NOME VARCHAR(40), ENDERECO VARCHAR(40), FONE_CONTATO VARCHAR(40), ) CREATE TABLE DEPENDENTE( COD_DEPENDENTE INT NOT NULL PRIMARY KEY, COD_PACIENTE INT, NOME VARCHAR(40) )

2. Descrever os códigos para popular as tabelas pelo menos 3 a 4 registros para cada tabela.

SELECT*FROM PACIENTE
INSERT INTO PACIENTE(COD_PACIENTE,NOME,ENDERECO, FONE_CONTATO) VALUES(1, 'Doria', 'Rua X', 9999-999), (2, 'Ricardo','Rua V', 9898-888), (3, 'Batista', 'Rua 10', 2999-8);
SELECT*FROM DEPENDENTE
INSERT INTO DEPENDENTE(COD_DEPENDENTE,COD_PACIENTE,NOME) VALUES(1, 2,'Joao'), (2, 3,'Ricardo'), (3, 2,'Jose');
SELECT*FROM CONSULTA
INSERT INTO CONSULTA(COD_PACIENTE, COD_MEDICO,DATACONSULTA)
Noma: Fabrício Fonseca Pereira Hein
VALUES(1, 2,'10/05/2010'), (2, 3,'20/05/2010'), (3, 2,'14/05/2010');

SELECT*FROM CARTAO

INSERT INTO CARTAO(COD_CARTAO, COD_PACIENTE, CONVENIO,DATA_VENC) VALUES(1, 2, 'SIM', '10/05/2020'), (2, 3, 'NAO', '20/03/2020'), (3, 1, 'SIM','14/05/2010');

3. Criar 4 procedures e explicar o funcionamento, para qual a finalidade, deverá constar os códigos da criação. (2.0)
Procedure de consultar quais não possuem convênio:

CREATE PROCEDURE CONSULTA_NAO AS BEGIN SELECT * FROM CARTAO WHERE CONVENIO = 'NAO' END
EXECUTE CONSULTA_NAO Procedure de consultar o paciente por COD:
CREATE PROCEDURE CONSULTA_PACIENTE AS BEGIN SELECT * FROM PACIENTE WHERE COD_PACIENTE = 1 END
EXECUTE CONSULTA_PACIENTE Procedure para inserir dados do Cartão:
CREATE PROCEDURE INSERIR_DADOS AS BEGIN SELECT*FROM CARTAO INSERT INTO CARTAO(COD_CARTAO, COD_PACIENTE, CONVENIO,DATA_VENC) VALUES(1, 2, 'SIM', '10/05/2020'), (2, 3, 'NAO', '20/05/2020'), (3, 2, 'NAO','14/05/2010'); END Procedure para consultar Cod_Médico:
CREATE PROCEDURE CONSULTA_MED AS BEGIN SELECT * FROM MEDICO WHERE COD_MEDICO = 1 END
EXECUTE CONSULTA_MED


4. Criar 2 funções e explicar o funcionamento, para qual a finalidade, deverá constar os códigos da criação. (2.0)

Função 1 para retornar a quantidade de pacientes que tem cartão :

 CREATE FUNCTION Retorna_Qtde_PACIENTE(@COD_PACIENTE NVARCHAR(255)) 
 RETURNS TABLE  AS  RETURN( 
 select  COUNT(*) AS CONVENIO from CARTAO where COD_PACIENTE = @COD_PACIENTE
 END

Função 2 para retorno da quantideade de dependentes por paciente: 
CREATE FUNCTION Retorna_Qtde_Dependente(@nome NVARCHAR(255)) 
 RETURNS TABLE  AS  RETURN INT ( 
DECLARE @CONTADOR INT SET @CONTADOR = (select COUNT(*) from DEPENDENTE where NOME=@nome) 
END

5. Criar 2 triggers e explicar o funcionamento, para qual a finalidade, deverá constar os códigos da criação. (2.0)
Triggers para atualizar os campos nome e cod;
CREATE TRIGGER TGR_PACIENTE ON PACIENTE FOR INSERT AS BEGIN    DECLARE    @COD_PACIENTE INT,    @NOME  VARCHAR(40)
 
    SELECT @COD_PACIENTE = COD_PACIENTE, @NOME = NOME FROM INSERTED
 
    UPDATE CAIXA SET   @NOME = NOME  @COD_PACIENTE = PACIENTE END GO



Triggers para deletar os campos nome e cod;

CREATE TRIGGER TGR_PACIENTE_DELET ON PACIENTE FOR DELETE AS BEGIN    DECLARE    @COD_PACIENTE INT,    @NOME  VARCHAR(40)
 
    SELECT @COD_PACIENTE = COD_PACIENTE, @NOME = NOME FROM INSERTED
 
    UPDATE CAIXA SET   @NOME = NOME  @COD_PACIENTE = PACIENTE END G
